import asyncio
import requests
from background import keep_alive
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import pytz

TOKEN = "7639996461:AAE1Grm61BEjUb6uGqdIz1pvmTO5z4n6-Ak"
GOOGLE_SHEET_URL = "https://script.google.com/macros/s/AKfycbz5DH-UVC3OJGBq_cwbqnHYcQ8yQrNXM3-5Eae46Lg5RiIN2RJkpU4L8D49dAnMRME5/exec"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üñ•Ô∏è LAN")],
        [KeyboardButton(text="üåç WAN")],
    ],
    resize_keyboard=True
)

# –ü–æ–¥–º–µ–Ω—é –¥–ª—è LAN
lan_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ÑπÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (LAN)")],
        [KeyboardButton(text="üå§Ô∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç (LAN)")],
        [KeyboardButton(text="üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (LAN)")],
        [KeyboardButton(text="üìÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (LAN)")],
        [KeyboardButton(text="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (LAN)")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

# –ü–æ–¥–º–µ–Ω—é –¥–ª—è WAN
wan_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ÑπÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (WAN)")],
        [KeyboardButton(text="üå§Ô∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç (WAN)")],
        [KeyboardButton(text="üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (WAN)")],
        [KeyboardButton(text="üìÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (WAN)")],
        [KeyboardButton(text="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (WAN)")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã
def get_data_from_google_sheet():
    try:
        response = requests.get(GOOGLE_SHEET_URL)
        data = response.json()
        if data:
            return data
        return None
    except Exception as e:
        print(f"Error fetching data from Google Sheets: {e}")
        return None


# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime —Å UTC
def convert_to_local_time(timestamp):
    utc_time = datetime.strptime(timestamp, "%Y-%m-%dT%H:%M:%S.%fZ")
    utc_time = utc_time.replace(tzinfo=pytz.utc)  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ UTC
    local_tz = pytz.timezone("Europe/Kyiv")
    local_time = utc_time.astimezone(local_tz)
    return local_time.strftime("%d-%m-%Y %H:%M:%S")


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–û–±–µ—Ä—ñ—Ç—å –∑–≤—ñ–¥–∫–∏ –≤–∏ –±–∞–∂–∞—î—Ç–µ –ø–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è:", reply_markup=main_keyboard)


@dp.message()
async def menu_handler(message: types.Message):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    if message.text == "üñ•Ô∏è LAN":
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=lan_keyboard)
    elif message.text == "üåç WAN":
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=wan_keyboard)
    
    # –ö–Ω–æ–ø–∫–∏ LAN
    elif message.text == "‚ÑπÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (LAN)":
        await message.answer("üîó [–Ü—Å—Ç–æ—Ä—ñ—è (LAN)](https://surl.li/harpcn)", parse_mode="Markdown", reply_markup=lan_keyboard)
    elif message.text == "üå§Ô∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç (LAN)":
        await message.answer("üîó [–î–∞–Ω—ñ (LAN)](http://192.168.0.100)", parse_mode="Markdown", reply_markup=lan_keyboard)
    elif message.text == "üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (LAN)":
        await message.answer("üîó [–ì—Ä–∞—Ñ—ñ–∫ (LAN)](http://192.168.0.100/index)", parse_mode="Markdown", reply_markup=lan_keyboard)
    elif message.text == "üìÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (LAN)":
        await message.answer("üîó [–ö–∞–ª–µ–Ω–¥–∞—Ä (LAN)](http://192.168.0.100/calendar)", parse_mode="Markdown", reply_markup=lan_keyboard)
    elif message.text == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (LAN)":
        data = get_data_from_google_sheet()
        if data:
            last_entry = data[-1]
            timestamp = last_entry.get("timestamp", None)
            if timestamp:
                formatted_time = convert_to_local_time(timestamp)
                response_message = (
                    f"üìã <b>–ü–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (LAN):</b>\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{last_entry['temperature']}</b>\n"
                    f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: <b>{last_entry['humidity']}</b>\n"
                    f"üîΩ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–∏–π —Ç–∏—Å–∫: <b>{last_entry['pressure']}</b>\n"
                    f"‚õ∞ –í–∏—Å–æ—Ç–∞ –Ω–∞–¥ —Ä—ñ–≤–Ω–µ–º –º–æ—Ä—è: <b>{last_entry['altitude']}</b>\n"
                    f"üßë‚Äçüî¨ –†—ñ–≤–µ–Ω—å –≥–∞–∑—É —É –ø–æ–≤—ñ—Ç—Ä—ñ: <b>{last_entry['gasValue']}</b>\n"
                    f"‚ö†Ô∏è –ù–∞—è–≤–Ω—ñ—Å—Ç—å –≥–∞–∑—É —É –ø–æ–≤—ñ—Ç—Ä—ñ: <b>{last_entry['gasState']}</b>\n"
                    f"üïí –ß–∞—Å: <i>{formatted_time}</i>"
                )
                await message.answer(response_message, parse_mode="HTML", reply_markup=lan_keyboard)
            else:
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ timestamp –≤ –¥–∞–Ω–∏—Ö.", reply_markup=lan_keyboard)
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.", reply_markup=lan_keyboard)


 # –ö–Ω–æ–ø–∫–∏ WAN
    elif message.text == "‚ÑπÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (WAN)":
        await message.answer("üîó [–Ü—Å—Ç–æ—Ä—ñ—è (WAN)](https://surl.li/harpcn)", parse_mode="Markdown", reply_markup=wan_keyboard)
    elif message.text == "üå§Ô∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç (WAN)":
        await message.answer("üîó [–î–∞–Ω—ñ (WAN)](https://duck-liked-slowly.ngrok-free.app/)", parse_mode="Markdown", reply_markup=wan_keyboard)
    elif message.text == "üìä –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (WAN)":
        await message.answer("üîó [–ì—Ä–∞—Ñ—ñ–∫ (WAN)](https://duck-liked-slowly.ngrok-free.app/index)", parse_mode="Markdown", reply_markup=wan_keyboard)
    elif message.text == "üìÖ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (WAN)":
        await message.answer("üîó [–ö–∞–ª–µ–Ω–¥–∞—Ä (WAN)](https://duck-liked-slowly.ngrok-free.app/ calendar)", parse_mode="Markdown", reply_markup=wan_keyboard)
    elif message.text == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (WAN)":
        data = get_data_from_google_sheet()
        if data:
            last_entry = data[-1]
            timestamp = last_entry.get("timestamp", None)
            if timestamp:
                formatted_time = convert_to_local_time(timestamp)
                response_message = (
                    f"üìã <b>–ü–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (WAN):</b>\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{last_entry['temperature']}</b>\n"
                    f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: <b>{last_entry['humidity']}</b>\n"
                    f"üîΩ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–∏–π —Ç–∏—Å–∫: <b>{last_entry['pressure']}</b>\n"
                    f"‚õ∞ –í–∏—Å–æ—Ç–∞ –Ω–∞–¥ —Ä—ñ–≤–Ω–µ–º –º–æ—Ä—è: <b>{last_entry['altitude']}</b>\n"
                    f"üßë‚Äçüî¨ –†—ñ–≤–µ–Ω—å –≥–∞–∑—É —É –ø–æ–≤—ñ—Ç—Ä—ñ: <b>{last_entry['gasValue']}</b>\n"
                    f"‚ö†Ô∏è –ù–∞—è–≤–Ω—ñ—Å—Ç—å –≥–∞–∑—É —É –ø–æ–≤—ñ—Ç—Ä—ñ: <b>{last_entry['gasState']}</b>\n"
                    f"üïí –ß–∞—Å: <i>{formatted_time}</i>"
                )
                await message.answer(response_message, parse_mode="HTML", reply_markup=wan_keyboard)
            else:
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ timestamp –≤ –¥–∞–Ω–∏—Ö.", reply_markup=wan_keyboard)
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.", reply_markup=wan_keyboard)

    # –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif message.text == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é:", reply_markup=main_keyboard)
    else:
        await message.answer("–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é.")


async def main():
    await dp.start_polling(bot)

keep_alive()

# üîÅ –ü–∏–Ω–≥—É–µ–º —Å–µ–±—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—ã–ø–∞–ª
def ping_self():
    while True:
        try:
            requests.get("https://tgbot-2-354s.onrender.com")
        except:
            pass
        time.sleep(600)

if __name__ == "__main__":
    asyncio.run(main())
