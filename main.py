import asyncio
import requests
import time
from background import keep_alive
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
import pytz

def match_date(timestamp_str, target_date):
    try:
        utc_time = datetime.strptime(timestamp_str, "%Y-%m-%dT%H:%M:%S.%fZ")
        local_time = utc_time.replace(tzinfo=pytz.utc).astimezone(pytz.timezone("Europe/Kyiv"))
        return local_time.date() == target_date.date()
    except Exception as e:
        print(f"‚ö†Ô∏è Error parsing timestamp: {e}")
        return False


user_state = {}  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–∂–∏–¥–∞–Ω–∏–µ –¥–∞—Ç—ã)
TOKEN = "7639996461:AAE1Grm61BEjUb6uGqdIz1pvmTO5z4n6-Ak"
GOOGLE_SHEET_URL = "https://script.google.com/macros/s/AKfycbyx9trfhFUWfJZoI6uIQzO06Cgqz8oXkLaNsFZKJkWTtVDplkhkaD75iJul-NNerah5/exec"

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üåç –ü–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è")],
    ],
    resize_keyboard=True
)


# –ü–æ–¥–º–µ–Ω—é –¥–ª—è WAN
wan_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚ÑπÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É")],
        [KeyboardButton(text="üå§Ô∏è –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É (LAN)")],
        [KeyboardButton(text="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É")],
        [KeyboardButton(text="üìà –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É –∑–∞ –¥–∞—Ç—É")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google –¢–∞–±–ª–∏—Ü—ã
def get_data_from_google_sheet():
    try:
        response = requests.get(GOOGLE_SHEET_URL)
        data = response.json()
        if data:
            return data
        return None
    except Exception as e:
        print(f"Error fetching data from Google Sheets: {e}")
        return None


# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime —Å UTC
def convert_to_local_time(timestamp):
    utc_time = datetime.strptime(timestamp, "%Y-%m-%dT%H:%M:%S.%fZ")
    utc_time = utc_time.replace(tzinfo=pytz.utc)  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —ç—Ç–æ UTC
    local_tz = pytz.timezone("Europe/Kyiv")
    local_time = utc_time.astimezone(local_tz)
    return local_time.strftime("%d-%m-%Y %H:%M:%S")


@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–¥–æ–≤–∂–µ–Ω–Ω—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è:", reply_markup=main_keyboard)


@dp.message()
async def menu_handler(message: types.Message):
    user_id = message.from_user.id  # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã
    if user_id in user_state and user_state[user_id].get("awaiting_date"):
        input_date = message.text.strip()  # –û–∂–∏–¥–∞–µ–º YYYY-MM-DD
        print(f"–ü–æ–ª—É—á–µ–Ω–∞ –¥–∞—Ç–∞: {input_date}")  # –õ–æ–≥–∏—Ä—É–µ–º –¥–∞—Ç—É

        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY
            dt_obj = datetime.strptime(input_date, "%Y-%m-%d")
            formatted_date = dt_obj.strftime("%d.%m.%Y")
            print(f"–î–∞—Ç–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∞: {formatted_date}")  # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É
        except ValueError:
            await message.answer("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏. –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD.")
            return

        data = get_data_from_google_sheet()
        if data:
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –¥–∞—Ç–µ, –≤–≤–µ–¥—ë–Ω–Ω–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
            filtered = [item for item in data if "timestamp" in item and match_date(item["timestamp"], dt_obj)]
            
            if filtered:
                # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ
                temp = sum(float(i["temperature"]) for i in filtered) / len(filtered)
                hum = sum(float(i["humidity"]) for i in filtered) / len(filtered)
                press = sum(float(i["pressure"]) for i in filtered) / len(filtered)
                alt = sum(float(i["altitude"]) for i in filtered) / len(filtered)
                gas = sum(float(i["gasValue"]) for i in filtered) / len(filtered)

                response = (
                    f"üìà <b>–°–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ {dt_obj.strftime('%d.%m.%Y')} (WAN):</b>\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp:.2f}</b> ¬∞C\n"
                    f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: <b>{hum:.2f}</b> %\n"
                    f"üîΩ –¢–∏—Å–∫: <b>{press:.2f}</b> hPa\n"
                    f"‚õ∞ –í–∏—Å–æ—Ç–∞: <b>{alt:.2f}</b> m\n"
                    f"üõ¢ –ì–∞–∑: <b>{gas:.2f}</b> ppm"
                )
                await message.answer(response, parse_mode="HTML", reply_markup=wan_keyboard)
            else:
                await message.answer("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –∑–∞ —Ü—é –¥–∞—Ç—É.", reply_markup=wan_keyboard)
        else:
            await message.answer("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –∑ Google Sheets.", reply_markup=wan_keyboard)

        # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
        user_state.pop(user_id, None)
        return


    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    if message.text == "üåç –ü–æ—á–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞–Ω–Ω—è":
        await message.answer("–í–∏–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=wan_keyboard)


    # –ö–Ω–æ–ø–∫–∏ WAN
    elif message.text.strip() == "‚ÑπÔ∏è –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É":
        await message.answer("üîó [–Ü—Å—Ç–æ—Ä—ñ—è (WAN)](https://surl.li/harpcn)", parse_mode="Markdown", reply_markup=wan_keyboard)
    elif message.text.strip() == "üå§Ô∏è –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –≤–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É (LAN)":
        await message.answer("üîó [–î–∞–Ω—ñ (WAN)](https://duck-liked-slowly.ngrok-free.app/)", parse_mode="Markdown", reply_markup=wan_keyboard)
    elif message.text.strip() == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –ø–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É":
        data = get_data_from_google_sheet()
        if data:
            last_entry = data[-1]
            timestamp = last_entry.get("timestamp", None)
            if timestamp:
                formatted_time = convert_to_local_time(timestamp)
                response_message = (
                    f"üìã <b>–ü–æ—Ç–æ—á–Ω—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É (WAN):</b>\n"
                    f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{last_entry['temperature']}</b>\n"
                    f"üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: <b>{last_entry['humidity']}</b>\n"
                    f"üîΩ –ê—Ç–º–æ—Å—Ñ–µ—Ä–Ω–∏–π —Ç–∏—Å–∫: <b>{last_entry['pressure']}</b>\n"
                    f"‚õ∞ –í–∏—Å–æ—Ç–∞ –Ω–∞–¥ —Ä—ñ–≤–Ω–µ–º –º–æ—Ä—è: <b>{last_entry['altitude']}</b>\n"
                    f"üßë‚Äçüî¨ –†—ñ–≤–µ–Ω—å –≥–∞–∑—É —É –ø–æ–≤—ñ—Ç—Ä—ñ: <b>{last_entry['gasValue']}</b>\n"
                    f"‚ö†Ô∏è –ù–∞—è–≤–Ω—ñ—Å—Ç—å –≥–∞–∑—É —É –ø–æ–≤—ñ—Ç—Ä—ñ: <b>{last_entry['gasState']}</b>\n"
                    f"üïí –ß–∞—Å: <i>{formatted_time}</i>"
                )
                await message.answer(response_message, parse_mode="HTML", reply_markup=wan_keyboard)
            else:
                await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ timestamp –≤ –¥–∞–Ω–∏—Ö.", reply_markup=wan_keyboard)
        else:
            await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞: –¥–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.", reply_markup=wan_keyboard)

    elif message.text.strip() == "üìà –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–µ—Ä–µ–¥–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –º—ñ–∫—Ä–æ–∫–ª—ñ–º–∞—Ç—É –∑–∞ –¥–∞—Ç—É":
        await message.answer("üóì –í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD:")
        user_state[user_id] = {"awaiting_date": True}

    # –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    elif message.text.strip() == "üîô –ù–∞–∑–∞–¥":
        await message.answer("–û–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –¥—ñ—é:", reply_markup=main_keyboard)
    else:
        await message.answer("–Ø –Ω–µ —Ä–æ–∑—É–º—ñ—é —Ü—é –∫–æ–º–∞–Ω–¥—É. –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é.")


async def main():
    await dp.start_polling(bot)

keep_alive()

# üîÅ –ü–∏–Ω–≥—É–µ–º —Å–µ–±—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Å—ã–ø–∞–ª
def ping_self():
    while True:
        try:
            requests.get("https://tgbot-2-354s.onrender.com")
        except:
            pass
        time.sleep(600)

from threading import Thread
Thread(target=ping_self).start()

if __name__ == "__main__":
    asyncio.run(main())
